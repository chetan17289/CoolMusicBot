/// <reference types="node" />
import Node, { VoiceServerUpdate, VoiceStateUpdate } from '../base/Node';
import { Track } from './Http';
import { EventEmitter } from 'events';
export declare enum Status {
    INSTANTIATED = 0,
    PLAYING = 1,
    PAUSED = 2,
    ENDED = 3,
    ERRORED = 4,
    STUCK = 5,
    UNKNOWN = 6
}
export declare enum EventType {
    TRACK_END = "TrackEndEvent",
    TRACK_EXCEPTION = "TrackExceptionEvent",
    TRACK_STUCK = "TrackStuckEvent",
    WEBSOCKET_CLOSED = "WebSocketClosedEvent"
}
export interface PlayerOptions {
    start?: number;
    end?: number;
    noReplace?: boolean;
}
export interface EqualizerBand {
    band: number;
    gain: number;
}
export interface JoinOptions {
    mute?: boolean;
    deaf?: boolean;
}
export default class Player extends EventEmitter {
    readonly node: Node;
    guildID: string;
    status: Status;
    constructor(node: Node, guildID: string);
    readonly playing: boolean;
    readonly paused: boolean;
    readonly voiceState: VoiceStateUpdate | undefined;
    readonly voiceServer: VoiceServerUpdate | undefined;
    moveTo(node: Node): Promise<void>;
    leave(): Promise<any>;
    join(channel: string | null, { deaf, mute }?: JoinOptions): Promise<any>;
    play(track: string | Track, { start, end, noReplace }?: PlayerOptions): Promise<void>;
    setVolume(vol: number): Promise<void>;
    setEqualizer(bands: EqualizerBand[]): Promise<void>;
    seek(position: number): Promise<void>;
    pause(paused?: boolean): Promise<void>;
    stop(): Promise<void>;
    destroy(): Promise<void>;
    voiceUpdate(sessionId: string, event: VoiceServerUpdate): Promise<void>;
    send(op: string, d?: object): Promise<void>;
}
