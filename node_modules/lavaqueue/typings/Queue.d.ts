/// <reference types="node" />
import { Player } from 'lavalink';
import QueueStore, { ExtendedRedis } from './QueueStore';
import { EventEmitter } from 'events';
export interface NP {
    position: number;
    track: string;
}
export default class Queue extends EventEmitter {
    readonly store: QueueStore;
    readonly guildID: string;
    readonly keys: {
        next: string;
        pos: string;
        prev: string;
    };
    constructor(store: QueueStore, guildID: string);
    readonly player: Player;
    start(): Promise<boolean>;
    add(...tracks: string[]): Promise<number>;
    unshift(...tracks: string[]): Promise<number>;
    remove(track: string): PromiseLike<number>;
    next(count?: number): Promise<boolean>;
    length(): PromiseLike<number>;
    sort(predicate?: (a: string, b: string) => number): Promise<number>;
    move(from: number, to: number): Promise<string[]>;
    shuffle(): Promise<string[]>;
    splice(start: number, deleteCount?: number, ...tracks: string[]): Promise<string[]>;
    trim(start: number, end: number): PromiseLike<string>;
    stop(): Promise<void>;
    clear(): Promise<number>;
    current(): Promise<NP | null>;
    tracks(start?: number, end?: number): Promise<string[]>;
    protected _next({ count, previous }?: {
        count?: number;
        previous?: NP | null;
    }): Promise<boolean>;
    protected readonly _redis: ExtendedRedis;
}
