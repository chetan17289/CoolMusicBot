import Queue from './Queue';
import Client from './';
import Redis = require('ioredis');
export interface ExtendedRedis extends Redis.Redis {
    lmove: (key: string, from: number, to: number) => Promise<string[]>;
    loverride: (key: string, ...args: any[]) => Promise<number>;
    lrevsplice: (key: string, start: number, deleteCount?: number, ...args: any[]) => Promise<string[]>;
    lshuffle: (key: string, seed: number) => Promise<string[]>;
    multirpoplpush: (source: string, dest: string, count: number) => Promise<string[]>;
}
export default class QueueStore extends Map<string, Queue> {
    readonly client: Client;
    redis: ExtendedRedis;
    constructor(client: Client, redis: Redis.Redis);
    get(key: string): Queue;
    start(filter?: (guildID: string) => boolean): Promise<void>;
    protected _scan(pattern: string, cursor?: number, keys?: string[]): Promise<string[]>;
}
