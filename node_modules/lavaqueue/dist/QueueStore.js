"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Queue_1 = require("./Queue");
const path = require("path");
const fs = require("fs");
const commands_1 = require("./commands");
class QueueStore extends Map {
    constructor(client, redis) {
        super();
        this.client = client;
        this.redis = redis;
        for (const command of commands_1.default) {
            this.redis.defineCommand(command.name, {
                numberOfKeys: command.keys,
                lua: fs.readFileSync(path.resolve(__dirname, 'scripts', `${command.name}.lua`)).toString(),
            });
        }
    }
    get(key) {
        let queue = super.get(key);
        if (!queue) {
            queue = new Queue_1.default(this, key);
            this.set(key, queue);
        }
        return queue;
    }
    async start(filter) {
        const keys = await this._scan('playlists.*');
        const guilds = keys.map(key => {
            const match = key.match(/^playlists\.(\d+)/);
            if (match)
                return match[1];
            throw new Error('error extracting guild ID from playlist');
        });
        await Promise.all(guilds.map(guild => {
            if (!filter || filter(guild))
                return this.get(guild).start();
            return false;
        }));
    }
    async _scan(pattern, cursor = 0, keys = []) {
        const response = await this.redis.scan(cursor, 'MATCH', pattern);
        keys.push(...response[1]);
        if (response[0] === '0')
            return keys;
        return this._scan(pattern, response[0], keys);
    }
}
exports.default = QueueStore;

//# sourceMappingURL=QueueStore.js.map
