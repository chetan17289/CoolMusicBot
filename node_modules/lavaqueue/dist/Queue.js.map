{"version":3,"sources":["Queue.ts"],"names":[],"mappings":"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","file":"Queue.js","sourcesContent":["import { Player } from 'lavalink';\nimport QueueStore, { ExtendedRedis } from './QueueStore';\nimport { EventEmitter } from 'events';\n\nexport interface NP {\n  position: number;\n  track: string;\n}\n\nexport default class Queue extends EventEmitter {\n  public readonly keys: { next: string, pos: string, prev: string };\n\n  constructor(public readonly store: QueueStore, public readonly guildID: string) {\n    super();\n    this.keys = {\n      next: `playlists.${this.guildID}.next`, // stored in reverse order: right-most (last) element is the next in queue\n      pos: `playlists.${this.guildID}.pos`,\n      prev: `playlists.${this.guildID}.prev`, // left-most (first) element is the currently playing track\n    };\n\n    this.on('event', async (d) => {\n      // if the track wasn't replaced or manually stopped, continue playing the next song\n      if (d.type !== 'TrackEndEvent' || !['REPLACED', 'STOPPED'].includes(d.reason)) {\n        let count = d.type === 'TrackEndEvent' ? undefined : 1;\n        try {\n          await this._next({ count, previous: d });\n        } catch (e) {\n          this.store.client.emit('error', e);\n        }\n      }\n    });\n\n    this.on('playerUpdate', async (d) => {\n      try {\n        await this._redis.set(this.keys.pos, d.state.position);\n      } catch (e) {\n        this.store.client.emit('error', e);\n      }\n    });\n  }\n\n  public get player(): Player {\n    return this.store.client.players.get(this.guildID);\n  }\n\n  public async start(): Promise<boolean> {\n    const np = await this.current();\n    if (!np) return this._next();\n\n    await this.player.play(np.track, { start: np.position });\n    return true;\n  }\n\n  public add(...tracks: string[]): Promise<number> {\n    if (!tracks.length) return Promise.resolve(0);\n    return this._redis.lpush(this.keys.next, ...tracks);\n  }\n\n  public unshift(...tracks: string[]): Promise<number> {\n    if (!tracks.length) return Promise.resolve(0);\n    return this._redis.rpush(this.keys.next, ...tracks);\n  }\n\n  public remove(track: string): PromiseLike<number> {\n    return this._redis.lrem(this.keys.next, 1, track);\n  }\n\n  public next(count: number = 1): Promise<boolean> {\n    return this._next({ count });\n  }\n\n  public length(): PromiseLike<number> {\n    return this._redis.llen(this.keys.next);\n  }\n\n  public async sort(predicate?: (a: string, b: string) => number): Promise<number> {\n    const tracks = await this.tracks();\n    tracks.sort(predicate);\n    return this._redis.loverride(this.keys.next, ...tracks);\n  }\n\n  public async move(from: number, to: number): Promise<string[]> {\n    const list = await this._redis.lmove(this.keys.next, -from - 1, -to - 1); // work from the end of the list, since it's reversed\n    return list.reverse();\n  }\n\n  public shuffle(): Promise<string[]> {\n    return this._redis.lshuffle(this.keys.next, Date.now());\n  }\n\n  public splice(start: number, deleteCount?: number, ...tracks: string[]): Promise<string[]> {\n    return this._redis.lrevsplice(this.keys.next, start, deleteCount, ...tracks);\n  }\n\n  public trim(start: number, end: number): PromiseLike<string> {\n    return this._redis.ltrim(this.keys.next, start, end);\n  }\n\n  public async stop() {\n    await this.player.stop();\n  }\n\n  public async clear(): Promise<number> {\n    return this._redis.del(this.keys.next, this.keys.prev, this.keys.pos);\n  }\n\n  public async current(): Promise<NP | null> {\n    const [track, position] = await Promise.all([\n      this._redis.lindex(this.keys.prev, 0),\n      this._redis.get(this.keys.pos),\n    ]);\n\n    if (track) {\n      return {\n        track,\n        position: parseInt(position) || 0,\n      };\n    }\n\n    return null;\n  }\n\n  public async tracks(start: number = 0, end: number = -1): Promise<string[]> {\n    if (end === Infinity) end = -1;\n\n    const tracks = await this._redis.lrange(this.keys.next, start, end);\n    return tracks.reverse();\n  }\n\n  protected async _next({ count, previous }: { count?: number, previous?: NP | null } = {}): Promise<boolean> {\n    await this._redis.set(this.keys.pos, 0);\n\n    if (!previous) previous = await this.current();\n    if (count === undefined && previous) {\n      const length = await this.length();\n      count = this.store.client.advanceBy(this, { previous: previous.track, remaining: length });\n    }\n    if (count === 0) return this.start();\n\n    const skipped = await this._redis.multirpoplpush(this.keys.next, this.keys.prev, count || 1);\n    if (skipped.length) return this.start();\n\n    await this.clear(); // we're at the end of the queue, so clear everything out\n    return false;\n  }\n\n  protected get _redis(): ExtendedRedis {\n    return this.store.redis;\n  }\n}\n"],"sourceRoot":"../src"}