"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @ignore
 */
const fecha = require('fecha');
/**
 * @ignore
 */
let genericError;
try {
    require.resolve('@ayana/errors');
    genericError = require('@ayana/errors').GenericError;
}
catch (e) {
    // Ignore
}
const constants_1 = require("../constants");
const util_1 = require("../util");
const Formatter_1 = require("./Formatter");
/**
 * @ignore
 */
const DEFAULT_FORMATTER_STORAGE_KEY = Symbol('DefaultFormatter');
class DefaultFormatter extends Formatter_1.Formatter {
    constructor(options) {
        super();
        this.errorColorer = new util_1.Color();
        this.logColorer = new util_1.Color();
        this.STORAGE_KEY = DEFAULT_FORMATTER_STORAGE_KEY;
        options = options || {};
        if (typeof options.dateFormat !== 'string')
            options.dateFormat = 'YYYY-MM-DD HH:mm:ss:SSS';
        if (typeof options.colorErrors !== 'boolean')
            options.colorErrors = true;
        if (typeof options.colorMeta !== 'boolean')
            options.colorMeta = true;
        this.options = options;
        this.logColorer.setEnabled(this.options.colorMeta);
    }
    formatMessage(meta, message) {
        const timestamp = fecha.format(Date.now(), this.options.dateFormat);
        // tslint:disable-next-line: no-magic-numbers
        const coloredLevel = this.logColorer.get(constants_1.LogLevelColor[meta.level], meta.level.padEnd(6));
        const location = `[${this.logColorer.green(`${meta.origin.packageName}:`)}${this.logColorer.blue(`${meta.origin.packagePath}${meta.origin.name}`)}${meta.uniqueMarker ? `/${this.logColorer.gray(`${meta.uniqueMarker}`)}` : ''}]`;
        return `${timestamp} ${coloredLevel}${location}: ${message}`;
    }
    formatError(meta, error) {
        let message = this.colorError(error);
        if (genericError != null && error instanceof genericError) {
            let cause = error;
            do {
                cause = cause.getCause();
                if (cause != null) {
                    message += `${this.getCausePrefix()} ${this.colorError(cause)}`;
                }
            } while (cause instanceof genericError);
        }
        return this.formatMessage(meta, message);
    }
    getCausePrefix() {
        if (this.options.colorErrors) {
            return `\n ${this.errorColorer.get('bgRed', 'Caused by:')}`;
        }
        return `\n Caused by:`;
    }
    colorError(error) {
        if (!this.options.colorErrors)
            return error.stack;
        let coloredError = error.stack;
        if (genericError != null && error instanceof genericError && error.hasCode()) {
            coloredError = coloredError.replace(`${error.name}:`, `${error.name}: (${this.errorColorer.magenta(String(error.getCode()))})`);
        }
        return coloredError
            .replace(error.name, this.errorColorer.underline(error.name))
            .replace(/at (.*?) \(/g, `at ${this.errorColorer.cyan('$1')} (`)
            .replace(/at (\/.*:.*:.*)/g, `at ${this.errorColorer.dim('$1')}`)
            .replace(/(\n {4}at)/g, this.errorColorer.yellow('$1'))
            .replace(/\((.*:.*:.*|native|eval at.*|unknown location)\)/g, this.errorColorer.dim('($1)'));
    }
}
exports.DefaultFormatter = DefaultFormatter;
//# sourceMappingURL=DefaultFormatter.js.map