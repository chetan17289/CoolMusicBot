"use strict";
// tslint:disable: variable-name no-magic-numbers
Object.defineProperty(exports, "__esModule", { value: true });
// CodeMap taken from https://github.com/Marak/colors.js/blob/master/lib/styles.js
// Licensed under MIT - Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)
/**
 * @ignore
 */
const CodeMap = {
    reset: [0, 0],
    bold: [1, 22],
    dim: [2, 22],
    italic: [3, 23],
    underline: [4, 24],
    inverse: [7, 27],
    hidden: [8, 28],
    strikethrough: [9, 29],
    black: [30, 39],
    red: [31, 39],
    green: [32, 39],
    yellow: [33, 39],
    blue: [34, 39],
    magenta: [35, 39],
    cyan: [36, 39],
    white: [37, 39],
    gray: [90, 39],
    bgBlack: [40, 49],
    bgRed: [41, 49],
    bgGreen: [42, 49],
    bgYellow: [43, 49],
    bgBlue: [44, 49],
    bgMagenta: [45, 49],
    bgCyan: [46, 49],
    bgWhite: [47, 49],
};
Object.values(CodeMap).forEach(value => {
    value[0] = `\u001b[${value[0]}m`;
    value[1] = `\u001b[${value[1]}m`;
});
/**
 * @ignore
 */
class Color {
    constructor() {
        this.disabled = false;
    }
    setEnabled(enabled) {
        this.disabled = !enabled;
    }
    setDisabled(disabled) {
        this.disabled = disabled;
    }
    get(color, str) {
        if (this.disabled)
            return str;
        return `${CodeMap[color][0]}${str}${CodeMap[color][1]}`;
    }
    green(str) {
        return this.get('green', str);
    }
    blue(str) {
        return this.get('blue', str);
    }
    gray(str) {
        return this.get('gray', str);
    }
    red(str) {
        return this.get('red', str);
    }
    dim(str) {
        return this.get('dim', str);
    }
    cyan(str) {
        return this.get('cyan', str);
    }
    yellow(str) {
        return this.get('yellow', str);
    }
    magenta(str) {
        return this.get('magenta', str);
    }
    underline(str) {
        return this.get('underline', str);
    }
    bgRed(str) {
        return this.get('bgRed', str);
    }
}
exports.Color = Color;
//# sourceMappingURL=Color.js.map