"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright 2018 - 2019 Ayana Developers <devs@ayana.io>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const formatter_1 = require("../formatter");
const transports_1 = require("../transports");
// I know global should not be used but I have no idea how to make this stuff always work without it
// If you have a better solution please make a PR
/**
 * @ignore
 */
const KEY = '__ayanaLogger__';
/**
 * @ignore
 */
const VERSION = require('../../package.json').version;
/**
 * @ignore
 */
const MAJOR = VERSION.split('.')[0];
/**
 * This class is not package-safe!
 * Do not use instanceof operations in here.
 *
 * @ignore
 */
class Config {
    constructor() {
        this.defaultTransport = new transports_1.ConsoleTransport();
        this.formatter = new formatter_1.DefaultFormatter();
        this.transports = [];
        Object.defineProperty(this, 'version', {
            configurable: false,
            writable: false,
            enumerable: true,
            value: VERSION,
        });
        Object.defineProperty(this, 'major', {
            configurable: false,
            writable: false,
            enumerable: true,
            value: MAJOR,
        });
        this.transports.push(this.defaultTransport);
    }
    disableDefaultTransport() {
        if (this.defaultTransport == null)
            return;
        this.transports.splice(1);
        this.defaultTransport = null;
    }
    static getInstance() {
        if (!global[KEY] || typeof global[KEY] !== 'object') {
            global[KEY] = Object.create(null);
        }
        if (!global[KEY][MAJOR] || typeof global[KEY][MAJOR] !== 'object') {
            global[KEY][MAJOR] = new Config();
        }
        return global[KEY][MAJOR];
    }
}
exports.Config = Config;
//# sourceMappingURL=Config.js.map