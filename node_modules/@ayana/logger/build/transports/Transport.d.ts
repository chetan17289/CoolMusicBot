import { LogLevel } from '../constants';
import { Formatter } from '../formatter';
import { Logger } from '../Logger';
import { LogMeta } from '../LogMeta';
export interface TransportOptionsLogger {
    name: string;
    level: LogLevel;
    exact?: boolean;
}
export interface TransportOptions {
    formatter?: Formatter;
    level?: LogLevel;
    loggers?: Array<TransportOptionsLogger>;
}
export declare abstract class Transport<T extends TransportOptions> {
    private readonly knownLoggers;
    protected readonly options: T;
    constructor(options?: T);
    setLevel(level: LogLevel): void;
    setFormatter(formatter: Formatter): void;
    setLoggers(loggers: Array<TransportOptionsLogger>): void;
    private getAllowedLevel;
    log(origin: Logger, level: LogLevel, input: string | Error | (() => string | Error), uniqueMarker?: string, extra?: any): LogMeta;
    logMeta(meta: LogMeta): void;
    private formatAndPrint;
    protected abstract print(meta: LogMeta, message: string): void;
}
