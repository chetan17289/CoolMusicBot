"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Transport_1 = require("./Transport");
/**
 * TODO: Unignore later
 *
 * @ignore
 */
class HTTPTransport extends Transport_1.Transport {
    constructor(options) {
        options = Object.assign({ endpoint: null, flushInterval: 0 }, (options || {}));
        super(options);
        if (this.options.endpoint == null)
            throw new Error('HTTPTransport requires a endpoint');
        this.buffer = [];
        this.lastFlush = null;
        // if we are bulking start a interval
        if (this.options.flushInterval > 0) {
            // consider tail calling from flush. instead of interval
            setInterval(() => {
                // TODO
            }, this.options.flushInterval);
        }
    }
    prepareRequest(messages) {
        return {
            body: { messages },
        };
    }
    print(meta, message) {
        this.buffer.push({ meta: meta, message });
        // bulking disabled, flush right away
        if (!this.options.flushInterval)
            this.flush();
    }
    flush() {
        if (this.buffer.length < 1) {
            // if tail-calling, set a new timeout
            return;
        }
        // TODO: implement http & https clients
        // if tail cailing & bulking, setTimeout with this.options.flushInterval
    }
}
exports.HTTPTransport = HTTPTransport;
//# sourceMappingURL=HTTPTransport.js.map